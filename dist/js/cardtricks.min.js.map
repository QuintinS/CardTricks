{"version":3,"sources":["base.js"],"names":["$","window","document","undefined","widget","options","someValue","_create","destroy","Widget","prototype","call","this","methodB","event","_trigger","key","value","methodA","_setOption","apply","arguments","jQuery"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAEAH,EAAAI,OAAA,wBAGAC,SACAC,UAAA,MAKAC,QAAA,aAYAC,QAAA,WAKAR,EAAAS,OAAAC,UAAAF,QAAAG,KAAAC,OAMAC,QAAA,SAAAC,GAOAF,KAAAG,SAAA,UAAAD,GACAE,IAAAC,SAIAC,QAAA,SAAAJ,GACAF,KAAAG,SAAA,cAAAD,GACAE,IAAAC,SAMAE,WAAA,SAAAH,EAAAC,GAYAjB,EAAAS,OAAAC,UAAAS,WAAAC,MAAAR,KAAAS,eAMAC,OAAArB,OAAAC","file":"cardtricks.min.js","sourcesContent":[";(function ( $, window, document, undefined ) {\n\n    $.widget( \"namespace.widgetname\" , {\n\n        //Options to be used as defaults\n        options: {\n            someValue: null\n        },\n\n        //Setup widget (eg. element creation, apply theming\n        // , bind events etc.)\n        _create: function () {\n\n            // _create will automatically run the first time\n            // this widget is called. Put the initial widget\n            // setup code here, then you can access the element\n            // on which the widget was called via this.element.\n            // The options defined above can be accessed\n            // via this.options this.element.addStuff();\n        },\n\n        // Destroy an instantiated plugin and clean up\n        // modifications the widget has made to the DOM\n        destroy: function () {\n\n            // this.element.removeStuff();\n            // For UI 1.8, destroy must be invoked from the\n            // base widget\n            $.Widget.prototype.destroy.call(this);\n            // For UI 1.9, define _destroy instead and don't\n            // worry about\n            // calling the base widget\n        },\n\n        methodB: function ( event ) {\n            //_trigger dispatches callbacks the plugin user\n            // can subscribe to\n            // signature: _trigger( \"callbackName\" , [eventObject],\n            // [uiObject] )\n            // eg. this._trigger( \"hover\", e /*where e.type ==\n            // \"mouseenter\"*/, { hovered: $(e.target)});\n            this._trigger('methodA', event, {\n                key: value\n            });\n        },\n\n        methodA: function ( event ) {\n            this._trigger('dataChanged', event, {\n                key: value\n            });\n        },\n\n        // Respond to any changes the user makes to the\n        // option method\n        _setOption: function ( key, value ) {\n            switch (key) {\n            case \"someValue\":\n                //this.options.someValue = doSomethingWith( value );\n                break;\n            default:\n                //this.options[ key ] = value;\n                break;\n            }\n\n            // For UI 1.8, _setOption must be manually invoked\n            // from the base widget\n            $.Widget.prototype._setOption.apply( this, arguments );\n            // For UI 1.9 the _super method can be used instead\n            // this._super( \"_setOption\", key, value );\n        }\n    });\n\n})( jQuery, window, document );\n"]}